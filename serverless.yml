service: auto-selling
frameworkVersion: "3"

plugins:
  - serverless-stack-output

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-northeast-2
  stage: dev
  environment:
    STAGE: ${sls:stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
    NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000"

custom:
  output:
    file: output-${self:service}-${sls:stage}.json
resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: ${self:service}-${sls:stage}
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true
            Mutable: true
          - AttributeDataType: String
            Name: name
            Required: false
            Mutable: true
        UsernameAttributes:
          - email
        UserAttributeUpdateSettings:
          AttributesRequireVerificationBeforeUpdate:
            - email
    CognitoUserPoolWebClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        CallbackURLs:
          - http://localhost:3000/auth/callback
        AllowedOAuthScopes:
          - email
          - openid
          - phone
          - profile
          - aws.cognito.signin.user.admin
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_CUSTOM_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        SupportedIdentityProviders:
          - COGNITO
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
          - implicit
        LogoutURLs:
          - http://localhost:3000
    CognitoDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:service}-${sls:stage}
        UserPoolId: !Ref CognitoUserPool
    PublicBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: ${self:service}-${sls:stage}-public
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
              AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
    PublicBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PublicBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource:
                - !Sub ${PublicBucket.Arn}/*
              Principal: "*"
  Outputs:
    AwsRegion:
      Value: ${aws:region}
    Stage:
      Value: ${sls:stage}
    CognitoUserPoolId:
      Value: !Ref CognitoUserPool
    CognitoUserPoolUrl:
      Value: !GetAtt CognitoUserPool.ProviderURL
    CognitoUserPoolProviderName:
      Value: !GetAtt CognitoUserPool.ProviderName
    CognitoUserPoolWebClientId:
      Value: !Ref CognitoUserPoolWebClient
    PublicBucket:
      Value: !Ref PublicBucket
